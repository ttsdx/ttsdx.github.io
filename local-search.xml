<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>c++指针和引用符号基础用法</title>
    <link href="/2022/11/20/c-%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8%E7%AC%A6%E5%8F%B7%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/"/>
    <url>/2022/11/20/c-%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8%E7%AC%A6%E5%8F%B7%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>对我来说，*和&amp;在我学习c++的最初一个月里，简直是两个魔法符号。哪儿都有的二人组遍布c++的程序之中，而且他们在不同的场合有不同的功能，这往往让我连他们在代码中的含义都搞不清楚，使用的时候更是无从下手。好在随着对c++的学习，我总算初步搞明白了这两个符号的功能。现在整理出来加深印象。</p><ul><li>*：解引用，定义指针</li></ul><p>*a： 当*出现在某个变量的左边时，代表对这个变量进行解引用。这种情况下变量a一般是一个地址，*a就代表a所指向的对象。</p><p>int *a：当出现在定义中时，代表对指针的声明。int *a代表声明了一个指向int的指针a。这里的int可以替换为任意的类A，语句所代表的含义也随之变化：声明一个A对象的指针a；</p><p>PS：对象和对象指针是两个不同的概念。</p><pre><code class="hljs">A a = new A； //声明一个叫a的A对象A* a = new A；//声明一个指向A对象的对象指针a</code></pre><p>对他们二者的访问手段也不同。对于对象，用a.variable和a.func（）来调用a的成员变量和成员函数。</p><p> 对于对象指针，用a-&gt;variable和a-&gt;func（）来调用。（-&gt;运算符的作用是：对地址解引用，然后调用成员。a-&gt;和（*a）.等价）</p><ul><li>&amp;：取地址，定义引用</li></ul><p>&amp;a：当&amp;出现在变量左边时，代表对这个对象进行取地址的操作。这种情况下a一般是一个对象，&amp;a就代表a的地址。</p><p>由于指针中的值一般是地址，所以会出现这种语句：A* ptr &#x3D; &amp;a；这表示，对a取地址，然后把这个地址赋给指向A类的指针ptr（这里的a必须是A类）</p><p>int &amp;a：当&amp;出现在定义中时，代表声明了一个引用。声明引用必须初始化。</p><p>“引用”可以理解为“别名”。例如int &amp;b &#x3D; a；就代表为int变量a取了一个别名b，此后a和b是完全等价的，对b的操作等同于对a的操作。 </p><p>对*和&amp;的基础理解也就到此为止，深入的部分以后加深了理解再来更新。</p><p>PS：这篇文章是前几天写的，写下的时候志得意满，结果昨天晚上做了一道简单的c++算法，几个数组和指针之间的操作让我瞬间被折磨。</p>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/11/20/%E6%8C%87%E9%92%88%E5%BC%95%E7%94%A8%E7%AC%A6%E5%8F%B7%E5%88%9D%E6%8E%A2/"/>
    <url>/2022/11/20/%E6%8C%87%E9%92%88%E5%BC%95%E7%94%A8%E7%AC%A6%E5%8F%B7%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<p>对我来说，*和&amp;在我学习c++的最初一个月里，简直是两个魔法符号。哪儿都有的二人组遍布c++的程序之中，而且他们在不同的场合有不同的功能，这往往让我连他们在代码中的含义都搞不清楚，使用的时候更是无从下手。好在随着对c++的学习，我总算初步搞明白了这两个符号的功能。现在整理出来加深印象。</p><ul><li>*：解引用，定义指针</li></ul><p>*a： 当*出现在某个变量的左边时，代表对这个变量进行解引用。这种情况下变量a一般是一个地址，*a就代表a所指向的对象。</p><p>int *a：当出现在定义中时，代表对指针的声明。int *a代表声明了一个指向int的指针a。这里的int可以替换为任意的类A，语句所代表的含义也随之变化：声明一个A对象的指针a；</p><p>PS：对象和对象指针是两个不同的概念。</p><pre><code class="hljs">A a = new A； //声明一个叫a的A对象A* a = new A；//声明一个指向A对象的对象指针a</code></pre><p>对他们二者的访问手段也不同。对于对象，用a.variable和a.func（）来调用a的成员变量和成员函数。</p><p> 对于对象指针，用a-&gt;variable和a-&gt;func（）来调用。（-&gt;运算符的作用是：对地址解引用，然后调用成员。a-&gt;和（*a）.等价）</p><ul><li>&amp;：取地址，定义引用</li></ul><p>&amp;a：当&amp;出现在变量左边时，代表对这个对象进行取地址的操作。这种情况下a一般是一个对象，&amp;a就代表a的地址。</p><p>由于指针中的值一般是地址，所以会出现这种语句：A* ptr &#x3D; &amp;a；这表示，对a取地址，然后把这个地址赋给指向A类的指针ptr（这里的a必须是A类）</p><p>int &amp;a：当&amp;出现在定义中时，代表声明了一个引用。声明引用必须初始化。</p><p>“引用”可以理解为“别名”。例如int &amp;b &#x3D; a；就代表为int变量a取了一个别名b，此后a和b是完全等价的，对b的操作等同于对a的操作。 </p><p>对*和&amp;的基础理解也就到此为止，深入的部分以后加深了理解再来更新。</p><p>PS：这篇文章是前几天写的，写下的时候志得意满，结果昨天晚上做了一道简单的c++算法，几个数组和指针之间的操作让我瞬间被折磨。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
