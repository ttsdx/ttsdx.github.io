<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/02/27/wsl%E8%BF%9E%E6%8E%A5xfce%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <url>/2024/02/27/wsl%E8%BF%9E%E6%8E%A5xfce%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: xfce+WSL2 配置Ubuntu图形化界面<br>date: 2024<span class="hljs-string">-2</span><span class="hljs-string">-27</span> 14:47:00<br><span class="hljs-keyword">tags:</span> ubuntu<br></code></pre></td></tr></table></figure><h1 id="xfce-WSL2-配置Ubuntu图形化界面"><a href="#xfce-WSL2-配置Ubuntu图形化界面" class="headerlink" title="xfce+WSL2 配置Ubuntu图形化界面"></a>xfce+WSL2 配置Ubuntu图形化界面</h1><p><a href="https://zhuanlan.zhihu.com/p/150555651">WSL2中使用VcXsrv实现xfce4图形界面+声音传输 - 知乎 (zhihu.com)</a></p><p>打开 “一键”，打开ubuntu。在ubuntu命令行中输入startxfce4</p><p>贴一下自己遇到的坑：在bashrc中设置了display为wsl网络接口地址后，没有用source命令让新的bashrc文件生效，所以一直出错。</p><p>（话说重启WSL竟然不会自动加载这个配置文件吗）</p><p>貌似profile是会被启动加载的那个文件。要想实现开机加载bashrc文件，要把它写到profile中</p><p>成功运行，但是有一堆报错。后续再研究吧。</p><p>设置里用了这一条自动获取，有效</p><p>export DISPLAY&#x3D;$(cat &#x2F;etc&#x2F;resolv.conf | grep nameserver | awk ‘{print $2}’):0</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>运输层rdt（可靠数据传输）初探</title>
    <link href="/2022/12/05/%E8%BF%90%E8%BE%93%E5%B1%82rdt%EF%BC%88%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%EF%BC%89%E5%88%9D%E6%8E%A2/"/>
    <url>/2022/12/05/%E8%BF%90%E8%BE%93%E5%B1%82rdt%EF%BC%88%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%EF%BC%89%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="运输层可靠数据传输（rdt）"><a href="#运输层可靠数据传输（rdt）" class="headerlink" title="运输层可靠数据传输（rdt）"></a>运输层可靠数据传输（rdt）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在互联网的多层传输模型中，运输层是较为抽象（高层）的层次。运输层不考虑底层的路由，或者是数据比特的具体控制与恢复——这些是运输层之下的网络层和数据链路层的任务。运输层从一个更高的层面，对下层这些操作的结果做出相应的反应，在全局上保证数据的可靠送达。</p><p>这里主要整理黑书中3.4.1节对可靠数据传输协议的构建。通过小步迭代的方式，完成一个简单的可靠数据传输模型。（reliable data transfer）</p><h2 id="rdt1：可靠信道"><a href="#rdt1：可靠信道" class="headerlink" title="rdt1：可靠信道"></a>rdt1：可靠信道</h2><p>首先，考虑最简单的情景：下层的信道完全可靠。</p><p>这种情况下，运输层不需要做什么特别的操作。当上层应用请求运输层发送数据，发送方持续地发送数据包即可，而最终所有的数据包都能正确有序地被接收方接受。</p><p>rdt1.0</p><h2 id="rdt2：应对比特差错"><a href="#rdt2：应对比特差错" class="headerlink" title="rdt2：应对比特差错"></a>rdt2：应对比特差错</h2><p>现在为我们的通信模型增加一点挑战：下层的信道偶尔会开小差，数据包有时会出现比特差错。<strong>（为方便区分，我们把比特差错包称为污染包）</strong></p><p>现在情况变得更贴近现实了。面对可能出错的下层信道，我们不能再简单地一股脑发送数据包就完事。（你发“12345”，对方收到的可能是“123口5”。）</p><h3 id="ACK与NAK"><a href="#ACK与NAK" class="headerlink" title="ACK与NAK"></a>ACK与NAK</h3><p>对此，我们加入<strong>停等</strong>机制与<strong>响应</strong>机制。</p><p>对于一段需要发送的数据包，我们不再不管不顾地持续发送，而是每发一个包就停下来，等收到接收方的回应之后，再进行下一次的发送。</p><p>我们规定两种响应包——<strong>ACK</strong>与<strong>NAK</strong>，分别表示顺利收到（acknowledge）与数据出错（negative acknowledge）。如果接收方接收到正确的数据包，就回复ACK；如果接到了污染包，就回复NAK。</p><p>接收方根据回复，来决定是继续发送接下来的数据包，还是重新发送上一个。</p><p><em>这里值得注意的是，我们默认接收方有能力识别出污染包。这是通过运输层之下的层次实现的，主要是通过在数据中插入一些额外的比特校验码之类的操作。</em></p><p>rdt2.0</p><h3 id="冗余"><a href="#冗余" class="headerlink" title="冗余"></a>冗余</h3><p>现在我们的运输模型已经对数据错误有了一定的抵抗能力。（假如发“12345”，而“4”出错成了“口”，接收方收到“口”之后识别出这是一个污染包，将回应NAK，发送方收到这个NAK后就会重传“4”。）</p><p>但是仍然有一个问题：回复包（ACK与NAK），本质上也是数据包，也有污染的可能性。</p><p>假如回复包出现错误，那么发送方就不能确定接收方究竟有没有接收到正确的数据。例如，接收方成功接受一个数据包，并回复了一个ACK，但是因污染变成了“口”。发送方收到这个“口”以后，无法确定接下来是否要重传。</p><p>解决的办法是<strong>冗余</strong>。对于污染的回复包，发送方一概进行重传。一旦接收到“口”这样的被污染回复包，不考虑它原本是ACK还是NAK，直接重传。</p><p>这样做能保证不出现数据包的遗漏。在接到清晰正确的ACK之前，发送方会一直发送这一个数据包，因此可以100%保证每一个数据包都被正确送达。</p><p>但是，这个“冗余”方案为接收方引入了新的麻烦——接收方无法判断传过来的数据包是重传，还是下一个数据包。如果ACK被污染，会出现重复接收数据包的问题。（我这边一切正常，正确接到“3”以后回复ACK，正准备接收下一个包“4”，结果，因为ACK出错变成了“口”，接到“口”的你二话不说重传了一个“3”。这下好了，我拿到“3”以后，把他当成我要的“4”收下了。）</p><h3 id="序号"><a href="#序号" class="headerlink" title="序号"></a>序号</h3><p>对于上面的问题，引入的解决方案非常简单——<strong>序号</strong>。</p><p>只要为每一个数据包，都添加一个额外的数据段，表示相应的数据包的序号，就能解决重复接受的问题。接收方能根据序号来判断传来的数据包是否已经接受过了。（在上面的例子中，对于第二次传来的“3”，接收方根据附加的序号判断出已经接收过“3”，因此不选择收下，而是仅发送一个ACK。这个ACK被发送方收到，发送方于是发送下一个包“4”，传输正确继续。）</p><p>考虑到我们是单个单个发包，这个序号只需要一位<strong>序号位</strong>（二进制“0&#x2F;1”），即可完成区分。（这个细讲起来太麻烦，自行理解。）</p><p>rdt2.1</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>在rdt2.1的基础上可以进行进一步的改进。我们取消NAK，用<strong>ACK+序号位</strong>来取代<strong>ACK+NAK</strong>的组合。用ACK+匹配的序号表示原ACK，用ACK+不匹配的序号表示原NAK。</p><p>rdt2.2</p><h2 id="丢包问题"><a href="#丢包问题" class="headerlink" title="丢包问题"></a>丢包问题</h2><p>经历了这么多，我们终于通过运输层模型的精妙设计，解决了传输过程中比特出错的问题。</p><p>现在我们让问题进一步贴近现实世界。我们开始考虑丢包。</p><p>丢包是指某个包在传输过程中由于出现问题，导致没有成功传达。（连污染包都没得）</p><p>这个包可能是发送方发送的数据包，也可能是接收方回复的回复包。</p><p>在我们的运输层设计中，我们将出现丢包之后的处理，交给发送方来做。</p><p>具体设计是采用<strong>定时器</strong>。每次发送方发送一个数据包之后，就启动一个定时器。定时器期间收到正确的ACK则关闭此定时器并发送新数据包，启动新定时器。若定时器启动期间一直没有收到正确的ACK，则在定时器结束后重传该数据包，启动新定时器。</p><p><em><strong>重传是一剂良药</strong></em></p><p>rdt3.0</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自律的const</title>
    <link href="/2022/11/20/%E8%87%AA%E5%BE%8B%E7%9A%84const/"/>
    <url>/2022/11/20/%E8%87%AA%E5%BE%8B%E7%9A%84const/</url>
    
    <content type="html"><![CDATA[<ul><li><p>const修饰符用于定义一些不能被修改的对象。被定义为const的对象不能被修改，const变量不能被重新赋值，const指针不能修改所指的对象。</p></li><li><p>对于有关被定义为const对象的操作很复杂。但是只需记住一个原则：不能让被声明为const的对象有被修改的可能性。</p></li></ul><p>举个指针的例子：</p><pre><code class="hljs">const int a = 1；int* b = &amp;a；</code></pre><p>上面的第二行操作就是非法的。原因在于：a已经被声明为const，因此不能有修改a值的行为，但是第二行用普通指针指向a，这个普通指针b提供了修改a的可能性。这是违反原则的，因此编译器不会允许通过。</p><p>反过来说，如果把指针b也声明为const，这两行代码就是正确的。（const指针不允许对指向对象的修改操作，因此，用const指针指向const对象是合法的——这样做并不会提供修改const对象的可能性）</p><p>对于引用，这个原则同样适用。你不能使用普通引用来指向const对象，但可以使用const引用来这么做。例如下面三行代码。</p><pre><code class="hljs">const int a = 1；  //a被定义为const，因此不能修改const int &amp; b = a；//正确，受限的const引用b并不提供修改a的机会int&amp; c = a；       //错误，不受限制的引用c提供了修改a的可能性</code></pre><ul><li><p>另一方面，你可以用const指针或引用来指向非const对象。</p><p>int a &#x3D; 42；      &#x2F;&#x2F;自由的a<br>const int&amp; b &#x3D; a；&#x2F;&#x2F;正确<br>const int* c &#x3D; a；&#x2F;&#x2F;正确</p></li></ul><p>无法通过b和c修改a的值，但是这三行代码可以通过编译。</p><ul><li>顶层const和底层const</li></ul><p>顶层const指的是，指针本身不能被改变；底层const指的是指针所指对象不能被改变。</p><p>前面所说的const指针，指的都是底层const。</p><p>两种const声明方法如下：</p><pre><code class="hljs">int a = 42；const int* b = a；//不能通过指针b修改a的值；（底层const）int * const c = a；//指针c自身不能修改，也就是永远只能指向a；（顶层const）</code></pre><p>可以同时赋予指针顶层和底层const属性</p><p>int a &#x3D; 42；</p><p>const int* const b &#x3D;  a；&#x2F;&#x2F;b只能指向a，同时，不能通过b修改a的值；*</p><p>const也可以修饰引用。和指针不同，引用自身天生是不能被修改的（引用没有办法改变自己指向的对象），因此可以说引用自带顶层const属性。</p><p>当然也可以为引用附加底层const，即声明一个不能修改对象的引用。</p><pre><code class="hljs">int a = 42；const int &amp; b = a；//无法通过引用b修改a的值；</code></pre><ul><li>const对象必须初始化</li></ul><p>被声明为const的变量是不能被赋值的，因此，它必须要被初始化。一旦初始化后就无法改变它的值。</p><ul><li>const对象仅在文件内有效（不是很理解）</li></ul><p>const对象仅在定义了它的文件中生效。不同文件中的相同const其实都算作不同的对象。</p><p>如果要让const对象在不同文件间共享，则需要在所有文件的对应对象的声明和定义之前都加上extern关键字</p><ul><li>constexpr：修饰的变量在编译阶段就能确定，且运行期间保持不变。</li></ul><p>我的理解是，用constexpr修饰的变量，必须能从阅读代码的过程中确定它的值。</p><p>因此，像下面这样的声明是错误的：</p><pre><code class="hljs">int a = 1；...                  //此处省略一堆代码constexpr int b = a；//错误，程序没有运行前，你不能确定a的值</code></pre><p>即便我们为上面的a加上const声明，仍然是错误的。因为，虽然const能保证此值不变化，但不能保证这个值的初始值固定，例如：</p><pre><code class="hljs">int  a；cin &gt;&gt; a；const int b = a；    //声明了const变量bconstexpr int c = b；//错误，程序运行前，你不能确定b的值</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++指针和引用符号基础用法</title>
    <link href="/2022/11/20/c-%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8%E7%AC%A6%E5%8F%B7%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/"/>
    <url>/2022/11/20/c-%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8%E7%AC%A6%E5%8F%B7%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>对我来说，*和&amp;在我学习c++的最初一个月里，简直是两个魔法符号。哪儿都有的二人组遍布c++的程序之中，而且他们在不同的场合有不同的功能，这往往让我连他们在代码中的含义都搞不清楚，使用的时候更是无从下手。好在随着对c++的学习，我总算初步搞明白了这两个符号的功能。现在整理出来加深印象。</p><ul><li>*：解引用，定义指针</li></ul><p>*a： 当*出现在某个变量的左边时，代表对这个变量进行解引用。这种情况下变量a一般是一个地址，*a就代表a所指向的对象。</p><p>int *a：当出现在定义中时，代表对指针的声明。int *a代表声明了一个指向int的指针a。这里的int可以替换为任意的类A，语句所代表的含义也随之变化：声明一个A对象的指针a；</p><p>PS：对象和对象指针是两个不同的概念。</p><pre><code class="hljs">A a = new A； //声明一个叫a的A对象A* a = new A；//声明一个指向A对象的对象指针a</code></pre><p>对他们二者的访问手段也不同。对于对象，用a.variable和a.func（）来调用a的成员变量和成员函数。</p><p> 对于对象指针，用a-&gt;variable和a-&gt;func（）来调用。（-&gt;运算符的作用是：对地址解引用，然后调用成员。a-&gt;和（*a）.等价）</p><ul><li>&amp;：取地址，定义引用</li></ul><p>&amp;a：当&amp;出现在变量左边时，代表对这个对象进行取地址的操作。这种情况下a一般是一个对象，&amp;a就代表a的地址。</p><p>由于指针中的值一般是地址，所以会出现这种语句：A* ptr &#x3D; &amp;a；这表示，对a取地址，然后把这个地址赋给指向A类的指针ptr（这里的a必须是A类）</p><p>int &amp;a：当&amp;出现在定义中时，代表声明了一个引用。声明引用必须初始化。</p><p>“引用”可以理解为“别名”。例如int &amp;b &#x3D; a；就代表为int变量a取了一个别名b，此后a和b是完全等价的，对b的操作等同于对a的操作。 </p><p>对*和&amp;的基础理解也就到此为止，深入的部分以后加深了理解再来更新。</p><p>PS：这篇文章是前几天写的，写下的时候志得意满，结果昨天晚上做了一道简单的c++算法，几个数组和指针之间的操作让我瞬间被折磨。</p>]]></content>
    
    
    
    <tags>
      
      <tag>c++基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
